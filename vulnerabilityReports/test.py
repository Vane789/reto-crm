from rest_framework.test import APIClient, APITestCase
from django.urls import reverse
from rest_framework import status
from django.contrib.auth.models import User
from .models import VulnerabilitiesFixed

class VulnerabilitiesFixedTestCase(APITestCase):
    
    def setUp(self):
        self.client = APIClient()
        self.user = User.objects.create_user(username='vane', password='1234')
        

        response = self.client.post(reverse('token_obtain_pair'), {
            'username': 'vane',
            'password': '1234'
        })
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.token = response.data['access']

        self.client.credentials(HTTP_AUTHORIZATION='Bearer ' + self.token)
        
        self.vuln_fixed = VulnerabilitiesFixed.objects.create(
            cve_id="CVE-2023-12345", 
            is_fixed=True
        )
        
        self.vuln_not_fixed = VulnerabilitiesFixed.objects.create(
            cve_id="CVE-2023-67890",
            is_fixed=False
        )
        
    def test_all_vulnerabilities(self):
        response = self.client.get('/vulnerabilities/all_vulnerabilities/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)
        
    def test_add_vulnerabilities_fixed(self):
        data = {
            "cve_id": "CVE-1999-0096",
            "is_fixed": True
        }
        response = self.client.post('/vulnerabilities/add_vulnerabilities_fixed/', data, format='json')
        self.assertEqual(response.status_code, status.HTTP_201_CREATED)
        self.assertEqual(response.data['message'], 'Vulnerability added')
        
    def test_all_vulnerabilities_excluding_fixed(self):
        response = self.client.get('/vulnerabilities/all_vulnerabilities_excluding_fixed/')
        self.assertEqual(response.status_code, status.HTTP_200_OK)