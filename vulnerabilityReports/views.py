from rest_framework import viewsets, permissions
from rest_framework.views import APIView
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework import status
import requests
from .models import VulnerabilitiesFixed
from django.contrib.auth.models import User
from .serializers import VulnerabilitiesFixedSerializer

# Función para obtener vulnerabilidades desde la API de NIST, con soporte para paginación.
def get_vulnerabilities(request):
    results_per_page = request.GET.get('resultsPerPage', '2000')
    start_index = request.GET.get('startIndex', '0')

    if not results_per_page.isdigit() or not start_index.isdigit():
        return Response({'error': 'Results per page and start index must be integers.'}, status=status.HTTP_400_BAD_REQUEST)

    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?resultsPerPage={results_per_page}&startIndex={start_index}"

    try:
        response = requests.get(url)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.RequestException as e:
        return Response({'error': f'An error occurred while fetching vulnerabilities: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

# Conjunto de vistas para manejar vulnerabilidades.
class VulnerabilityViewSet(viewsets.ViewSet):
    permission_classes = [permissions.IsAuthenticated]
    serializer_class = VulnerabilitiesFixedSerializer
    # Endpoint para obtener todas las vulnerabilidades.
    @action(detail=False, methods=['get'])
    def all_vulnerabilities(self, request):
        try:
            data = get_vulnerabilities(request)
            return Response(data)
        except requests.exceptions.HTTPError as http_err:
            return Response({'error': f'HTTP error occurred: {http_err}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    # Endpoint para agregar vulnerabilidades fixeadas a la base de datos.
    @action(detail=False, methods=['post'])
    def add_vulnerabilities_fixed(self, request):
        serializer = VulnerabilitiesFixedSerializer(data=request.data)

        if not serializer.is_valid():
            return Response({'error': serializer.errors}, status=status.HTTP_400_BAD_REQUEST)

        cve_id = serializer.validated_data["cve_id"]
        is_fixed = serializer.validated_data["is_fixed"]

        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            nvd_data = response.json()

            if 'vulnerabilities' not in nvd_data or not nvd_data['vulnerabilities']:
                return Response({'error': 'CVE ID not found'}, status=status.HTTP_404_NOT_FOUND)

        except requests.exceptions.RequestException as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        created, _ = VulnerabilitiesFixed.objects.update_or_create(
            cve_id=cve_id,
            defaults={'is_fixed': is_fixed}
        )

        if created:
            return Response({'message': 'Vulnerability added'}, status=status.HTTP_201_CREATED)
        
    # Endpoint para obtener todas las vulnerabilidades, excluyendo las fixeadas.
    @action(detail=False, methods=['get'])
    def all_vulnerabilities_excluding_fixed(self, request):
        try:
            data = get_vulnerabilities(request)
            fixed_cves = VulnerabilitiesFixed.objects.filter(is_fixed=True).values_list('cve_id', flat=True)
            
            filtered_vulnerabilities = []
            
            for vulnerability in data.get('vulnerabilities', []):
                cve_id = vulnerability.get('cve', {}).get('id')
                if cve_id not in fixed_cves:
                    filtered_vulnerabilities.append(vulnerability)
                    
            data['vulnerabilities'] = filtered_vulnerabilities
            return Response(data)
        
        except requests.exceptions.RequestException as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
            
    # Endpoint para obtener un resumen de las vulnerabilidades por severidad.       
    @action(detail=False, methods=['get'])
    def vulnerabilities_severity_summary(self, request):
        severities = ['LOW', 'MEDIUM', 'HIGH']
        summary = {}

        for severity in severities:
            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cvssV2Severity={severity}&resultsPerPage=1"
            
            try:
                response = requests.get(url)
                response.raise_for_status()
                data = response.json()

                total_results = data.get('totalResults', 0)
                summary[severity] = total_results

            except requests.exceptions.RequestException as e:
                return Response({'error': f'An error occurred {severity}: {str(e)}'}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)

        return Response(summary, status=status.HTTP_200_OK)
    
    # Endpoint adicional para obtener todas las vulnerabilidades fixeadas.
    @action(detail=False, methods=['get'])
    def all_vulnerabilities_fixed(self, request):
        try:
            data = get_vulnerabilities(request)
            fixed_cves = VulnerabilitiesFixed.objects.filter(is_fixed=True).values_list('cve_id', flat=True)
            
            fixed_vulnerabilities = []
            
            for vulnerability in data.get('vulnerabilities', []):
                cve_id = vulnerability.get('cve', {}).get('id')
                if cve_id in fixed_cves:
                    fixed_vulnerabilities.append(vulnerability)
                    
            data['vulnerabilities'] = fixed_vulnerabilities
            return Response(data)
        
        except requests.exceptions.RequestException as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
    # Endpoint para obtener una vulnerabilidad por id.    
    @action(detail=False, methods=['get'])
    def vulnerabilities_id(self, request):
        cve_id = request.GET.get('cveId')
        if not cve_id:
            return Response({'error': 'CVE ID parameter is required.'}, status=status.HTTP_400_BAD_REQUEST)

        try:
            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cve_id}"
            response = requests.get(url)
            response.raise_for_status()
            nvd_data = response.json()

            if 'vulnerabilities' not in nvd_data or not nvd_data['vulnerabilities']:
                return Response({'error': 'CVE ID not found'}, status=status.HTTP_404_NOT_FOUND)
            
            return Response(nvd_data)
        except requests.exceptions.RequestException as e:
            return Response({'error': str(e)}, status=status.HTTP_500_INTERNAL_SERVER_ERROR)
        
        
class RegisterView(APIView):
    permission_classes = [permissions.AllowAny]

    def post(self, request):
        username = request.data.get('username')
        password = request.data.get('password')

        if not username or not password:
            return Response({'error': 'Username and password are required.'}, status=status.HTTP_400_BAD_REQUEST)

        if User.objects.filter(username=username).exists():
            return Response({'error': 'Username already exists.'}, status=status.HTTP_400_BAD_REQUEST)

        User.objects.create_user(username=username, password=password)
        return Response({'message': 'User registered successfully.'}, status=status.HTTP_201_CREATED)